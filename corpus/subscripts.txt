================================================================================
Subscript expansions with indexes or variables
================================================================================

echo ${abc[1]}
echo ${abc[-1]}
echo ${abc[1, -1]}
echo ${abc[$edf]}
echo ${abc[$edf, $ghi]}
echo ${abc[edf]}
echo ${abc[$edf, ghi]}
echo ${abc[edf, $ghi]}
echo ${abc[$aaa${bbb}213]}
echo ${abc[$aaa${bbb}abc${abc}]}
echo ${abc[123$aaa${bbb}213${abc}]}
echo ${abc[-]}
echo ${abc[$]}
echo ${abc[@]}
echo ${abc[*]}

--------------------------------------------------------------------------------

(program
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (number))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (number))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (number))
      (subscript
        (number))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (simple_expansion
          (variable_name)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (simple_expansion
          (variable_name)))
      (subscript
        (simple_expansion
          (variable_name)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (variable_name))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (simple_expansion
          (variable_name)))
      (subscript
        (variable_name))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (variable_name))
      (subscript
        (simple_expansion
          (variable_name)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (simple_expansion
          (variable_name))
        (expansion
          (variable_name))
        (number))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (simple_expansion
          (variable_name))
        (expansion
          (variable_name))
        (variable_name)
        (expansion
          (variable_name)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (number)
        (simple_expansion
          (variable_name))
        (expansion
          (variable_name))
        (number)
        (expansion
          (variable_name)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (special_variable_name))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (special_variable_name))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (special_subscript))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (special_subscript)))))

================================================================================
Subscript expansions with flags
================================================================================

echo ${abc[(r)def]}
echo ${abc[(r)def?]}
echo ${abc[(R)def?, (r)ghi*]}
echo ${abc[(r)$def]}
echo ${abc[(r)$def?]}
echo ${abc[(i)$def?, (I)${~ghi}*]}
echo ${abc[(r)\\\(\]\)\[*abc$def[\(\]\[\)\\]$def]}
echo ${abc[(w)1]}
echo ${abc[(w)def1, (p)ghi123]}
echo ${abc[(wpfkKe)$def]}
echo ${abc[(s:abc:)$def]}

--------------------------------------------------------------------------------

(program
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (subscript_flag)
        (glob))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (subscript_flag)
        (glob))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (subscript_flag)
        (glob))
      (subscript
        (subscript_flag)
        (glob))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (subscript_flag)
        (simple_expansion
          (variable_name)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (subscript_flag)
        (simple_expansion
          (variable_name))
        (glob))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (subscript_flag)
        (simple_expansion
          (variable_name))
        (glob))
      (subscript
        (subscript_flag)
        (expansion
          (modifier)
          (variable_name))
        (glob))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (subscript_flag)
        (glob)
        (simple_expansion
          (variable_name))
        (glob)
        (simple_expansion
          (variable_name)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (subscript_flag)
        (number))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (subscript_flag)
        (variable_name))
      (subscript
        (subscript_flag)
        (variable_name))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (subscript_flag)
        (simple_expansion
          (variable_name)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (subscript_flag)
        (simple_expansion
          (variable_name))))))

================================================================================
Subscript expansions with expression
================================================================================

echo ${abc[1 + 1]}
echo ${abc[- 1 + 1]}
echo ${abc[1 + - 1]}
echo ${abc[- 1 + - 1]}
echo ${abc[a * $v]}
echo ${abc[- a * ${v}]}
echo ${abc[1 * - 1]}
echo ${abc[- 1 * - 1]}
echo ${abc[1+1]}
echo ${abc[+1+-1]}
echo ${abc[1*1]}
echo ${abc[+1*+1]}
echo ${abc[1*1, 1 % 1]}
echo ${abc[- 1 ? + 1 : - 1]}
echo ${abc[-(3**2)]}
echo ${abc[1 >> 1 + 2 & + 2 ** 2 && 3, 2 - - 1 % -- v]}
echo ${abc[++v]}
echo ${abc[++ v]}
echo ${abc[v--]}
echo ${abc[v --]}
echo ${abc[(w)1]}
echo ${abc[(w) - 1 + + 1]}
echo ${abc[(w)-(3**2)]}
echo ${abc[(w)1 >> 1 + 2 & + 2 ** 2 && 3,(e) 2 - - 1 % -- v]}
echo ${abc[(a=1, ++ a, a ^^ 3)]}

--------------------------------------------------------------------------------

(program
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (binary_expression
          (number)
          (number)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (binary_expression
          (unary_expression
            (number))
          (number)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (binary_expression
          (number)
          (unary_expression
            (number))))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (binary_expression
          (unary_expression
            (number))
          (unary_expression
            (number))))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (binary_expression
          (variable_name)
          (simple_expansion
            (variable_name))))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (binary_expression
          (unary_expression
            (variable_name))
          (expansion
            (variable_name))))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (binary_expression
          (number)
          (unary_expression
            (number))))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (binary_expression
          (unary_expression
            (number))
          (unary_expression
            (number))))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (binary_expression
          (number)
          (number)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (binary_expression
          (unary_expression
            (number))
          (number)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (binary_expression
          (number)
          (number)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (binary_expression
          (unary_expression
            (number))
          (unary_expression
            (number))))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (binary_expression
          (number)
          (number)))
      (subscript
        (binary_expression
          (number)
          (number)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (ternary_expression
          (unary_expression
            (number))
          (unary_expression
            (number))
          (unary_expression
            (number))))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (unary_expression
          (parenthesized_expression
            (binary_expression
              (number)
              (number)))))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (binary_expression
          (binary_expression
            (binary_expression
              (number)
              (number))
            (binary_expression
              (binary_expression
                (number)
                (unary_expression
                  (number)))
              (number)))
          (number)))
      (subscript
        (binary_expression
          (number)
          (binary_expression
            (unary_expression
              (number))
            (unary_expression
              (variable_name)))))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (unary_expression
          (variable_name)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (unary_expression
          (variable_name)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (unary_expression
          (variable_name)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (unary_expression
          (variable_name)))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (subscript_flag)
        (number))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (subscript_flag)
        (binary_expression
          (unary_expression
            (number))
          (unary_expression
            (number))))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (subscript_flag)
        (unary_expression
          (parenthesized_expression
            (binary_expression
              (number)
              (number)))))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (subscript_flag)
        (binary_expression
          (binary_expression
            (binary_expression
              (number)
              (number))
            (binary_expression
              (binary_expression
                (number)
                (unary_expression
                  (number)))
              (number)))
          (number)))
      (subscript
        (subscript_flag)
        (binary_expression
          (number)
          (binary_expression
            (unary_expression
              (number))
            (unary_expression
              (variable_name)))))))
  (command
    (command_name
      (word))
    (expansion
      (variable_name)
      (subscript
        (parenthesized_expression
          (binary_expression
            (binary_expression
              (binary_expression
                (variable_name)
                (number))
              (unary_expression
                (variable_name)))
            (binary_expression
              (variable_name)
              (number))))))))
